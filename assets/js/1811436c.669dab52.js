"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[5496],{158:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(6393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(9122),r=n(2501),s=(n(6393),n(158)),i=["components"],l={title:"ae-incompatible-release-tags"},o=void 0,p={unversionedId:"pages/messages/ae-incompatible-release-tags",id:"pages/messages/ae-incompatible-release-tags",title:"ae-incompatible-release-tags",description:'"The symbol *** is marked as ***, but its signature references *** which is marked as ***."',source:"@site/docs/pages/messages/ae-incompatible-release-tags.md",sourceDirName:"pages/messages",slug:"/pages/messages/ae-incompatible-release-tags",permalink:"/pages/messages/ae-incompatible-release-tags",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/messages/ae-incompatible-release-tags.md",tags:[],version:"current",frontMatter:{title:"ae-incompatible-release-tags"},sidebar:"docsSidebar",previous:{title:"ae-forgotten-export",permalink:"/pages/messages/ae-forgotten-export"},next:{title:"ae-internal-missing-underscore",permalink:"/pages/messages/ae-internal-missing-underscore"}},c={},m=[{value:"Remarks",id:"remarks",level:2},{value:"How to fix",id:"how-to-fix",level:2},{value:"See also",id:"see-also",level:2}],u={toc:m},d="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},'"The symbol ',(0,s.kt)("strong",{parentName:"em"},(0,s.kt)("em",{parentName:"strong"}," is marked as ")),", but its signature references ",(0,s.kt)("strong",{parentName:"em"},(0,s.kt)("em",{parentName:"strong"}," which is marked as ")),'."')),(0,s.kt)("h2",{id:"remarks"},"Remarks"),(0,s.kt)("p",null,'The TSDoc "release tags" form an ordering according to their visibility:'),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"@public")," ",">"," ",(0,s.kt)("inlineCode",{parentName:"p"},"@beta")," ",">"," ",(0,s.kt)("inlineCode",{parentName:"p"},"@alpha")," ",">"," ",(0,s.kt)("inlineCode",{parentName:"p"},"@internal")),(0,s.kt)("p",null,'For example, when .d.ts trimming is applied, a "beta" release will include declarations marked as ',(0,s.kt)("inlineCode",{parentName:"p"},"@public")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"@beta"),",\nbut will omit declarations marked as ",(0,s.kt)("inlineCode",{parentName:"p"},"@alpha")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"@internal"),". This prevents the developer from accidentally\nusing an ",(0,s.kt)("inlineCode",{parentName:"p"},"@alpha")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"@internal")," declaration."),(0,s.kt)("p",null,"But suppose we have an API like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Not visible in a "beta" release.\n * @alpha\n */\nexport ICalculateOptions {\n  numerator: number;\n  denominator: number;\n}\n\n/**\n * Visible in a "beta" release.\n * @beta\n */\nexport function calculate(options: ICalculateOptions): void {  // <-- problem!\n}\n\n// Warning: The symbol "calculate" is marked as "@beta", but its signature references\n// "ICalculateOpations" which is marked as "@alpha"\n')),(0,s.kt)("p",null,'When a developer is using the "beta" release, they won\'t be able to access the ',(0,s.kt)("inlineCode",{parentName:"p"},"ICalculateOptions")," type needed\nto call the ",(0,s.kt)("inlineCode",{parentName:"p"},"calculate()")," function. That's not good!"),(0,s.kt)("p",null,"Similarly, suppose that a ",(0,s.kt)("inlineCode",{parentName:"p"},"@beta")," class were to inherit from an ",(0,s.kt)("inlineCode",{parentName:"p"},"@alpha")," class:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Not visible in a "beta" release.\n * @alpha\n */\nexport class Control {\n  public constructor(x: height, y: width) {}\n}\n\n/**\n * Visible in a "beta" release.\n * @beta\n */\nexport class Button extends Control {\n  // <-- problem!\n}\n\n// Warning: "The symbol "Button" is marked as "@beta", but its signature references\n// "Control" which is marked as "@alpha"\n')),(0,s.kt)("p",null,'When a developer is using the "beta" release, they should not be using the ',(0,s.kt)("inlineCode",{parentName:"p"},"Control")," type because it is marked as\n",(0,s.kt)("inlineCode",{parentName:"p"},"@alpha"),". But then how are they supposed to construct an instance of ",(0,s.kt)("inlineCode",{parentName:"p"},"Button")," class, which relies on it?"),(0,s.kt)("p",null,"It's interesting to consider what happens when the tags are reversed:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Visible in a "beta" release.\n * @beta\n */\nexport class Control {\n  public constructor(x: height, y: width) {}\n}\n\n/**\n * Not visible in a "beta" release.\n * @alpha\n */\nexport class Button extends Control {\n  // <-- okay\n}\n')),(0,s.kt)("p",null,'In this example, the "beta" release hides the ',(0,s.kt)("inlineCode",{parentName:"p"},"Button")," class, but it's still perfectly valid for a developer to use\nthe base class ",(0,s.kt)("inlineCode",{parentName:"p"},"Control"),". So there is no incompatibility here."),(0,s.kt)("p",null,"In general, the principle here is that ",(0,s.kt)("em",{parentName:"p"},"a type signature should not reference another types whose release tag\nis less visible"),". API Extractor checks this for you, and will report ",(0,s.kt)("inlineCode",{parentName:"p"},"ae-incompatible-release-tags")," if it detects\nan inconsistency."),(0,s.kt)("h2",{id:"how-to-fix"},"How to fix"),(0,s.kt)("p",null,"Correct the release tags so that the relationships are consistent."),(0,s.kt)("h2",{id:"see-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/pages/tsdoc/doc_comment_syntax#release-tags"},"Doc comment syntax: Release tags"))))}h.isMDXComponent=!0}}]);