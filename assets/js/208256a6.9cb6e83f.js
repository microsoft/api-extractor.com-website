"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[6276],{158:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(6393);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),u=l,k=c["".concat(i,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[c]="string"==typeof e?e:l,r[1]=p;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>p,metadata:()=>s,toc:()=>c});var a=n(9122),l=n(2501),o=(n(6393),n(158)),r=["components"],p={title:"api-extractor.json"},i=void 0,s={unversionedId:"pages/configs/api-extractor_json",id:"pages/configs/api-extractor_json",title:"api-extractor.json",description:"API Extractor's behavior is controlled by a config file api-extractor.json that is stored with your project.",source:"@site/docs/pages/configs/api-extractor_json.md",sourceDirName:"pages/configs",slug:"/pages/configs/api-extractor_json",permalink:"/pages/configs/api-extractor_json",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/configs/api-extractor_json.md",tags:[],version:"current",frontMatter:{title:"api-extractor.json"},sidebar:"docsSidebar",previous:{title:"api-documenter yaml",permalink:"/pages/commands/api-documenter_yaml"},next:{title:"tsdoc.json",permalink:"/pages/configs/tsdoc_json"}},d={},c=[{value:"Top-level Settings",id:"top-level-settings",level:2},{value:"extends",id:"extends",level:3},{value:"projectFolder",id:"projectfolder",level:3},{value:"mainEntryPointFilePath",id:"mainentrypointfilepath",level:3},{value:"bundledPackages",id:"bundledpackages",level:3},{value:"newlineKind",id:"newlinekind",level:3},{value:"testMode",id:"testmode",level:3},{value:"enumMemberOrder",id:"enummemberorder",level:3},{value:"Compiler Section",id:"compiler-section",level:2},{value:"compiler.tsconfigFilePath",id:"compilertsconfigfilepath",level:3},{value:"compiler.overrideTsconfig",id:"compileroverridetsconfig",level:3},{value:"compiler.skipLibCheck",id:"compilerskiplibcheck",level:3},{value:"API Report Section",id:"api-report-section",level:2},{value:"apiReport.enabled",id:"apireportenabled",level:3},{value:"apiReport.reportFileName",id:"apireportreportfilename",level:3},{value:"apiReport.reportFolder",id:"apireportreportfolder",level:3},{value:"apiReport.reportTempFolder",id:"apireportreporttempfolder",level:3},{value:"apiReport.includeForgottenExports",id:"apireportincludeforgottenexports",level:3},{value:"Doc Model Section",id:"doc-model-section",level:2},{value:"docModel.enabled",id:"docmodelenabled",level:3},{value:"docModel.apiJsonFilePath",id:"docmodelapijsonfilepath",level:3},{value:"docModel.includeForgottenExports",id:"docmodelincludeforgottenexports",level:3},{value:".d.ts Rollup Section",id:"dts-rollup-section",level:2},{value:"dtsRollup.enabled",id:"dtsrollupenabled",level:3},{value:"dtsRollup.untrimmedFilePath",id:"dtsrollupuntrimmedfilepath",level:3},{value:"dtsRollup.betaTrimmedFilePath",id:"dtsrollupbetatrimmedfilepath",level:3},{value:"dtsRollup.publicTrimmedFilePath",id:"dtsrolluppublictrimmedfilepath",level:3},{value:"dtsRollup.omitTrimmingComments",id:"dtsrollupomittrimmingcomments",level:3},{value:"TSDoc Metadata Section",id:"tsdoc-metadata-section",level:2},{value:"tsdocMetadata.enabled",id:"tsdocmetadataenabled",level:3},{value:"tsdocMetadata.tsdocMetadataFilePath",id:"tsdocmetadatatsdocmetadatafilepath",level:3},{value:"Message Reporting Section",id:"message-reporting-section",level:2},{value:"messages.&lt;section&gt;.&lt;rule&gt;.logLevel",id:"messagessectionruleloglevel",level:3},{value:"messages.&lt;section&gt;.&lt;rule&gt;.addToApiReportFile",id:"messagessectionruleaddtoapireportfile",level:3},{value:"messages.compilerMessageReporting",id:"messagescompilermessagereporting",level:3},{value:"messages.extractorMessageReporting",id:"messagesextractormessagereporting",level:3},{value:"messages.tsdocMessageReporting",id:"messagestsdocmessagereporting",level:3}],m={toc:c},u="wrapper";function k(e){var t=e.components,n=(0,l.Z)(e,r);return(0,o.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"API Extractor's behavior is controlled by a config file ",(0,o.kt)("strong",{parentName:"p"},"api-extractor.json")," that is stored with your project.\nYou can use the ",(0,o.kt)("a",{parentName:"p",href:"/pages/commands/api-extractor_init"},"api-extractor init")," command to create a template\nfile to get you started. The template will contain comments describing each setting. It is based on\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rushstack/blob/main/apps/api-extractor/src/schemas/api-extractor-template.json"},"api-extractor-template.json"),"\nfrom the source code."),(0,o.kt)("p",null,"The individual JSON fields are documented below."),(0,o.kt)("h2",{id:"top-level-settings"},"Top-level Settings"),(0,o.kt)("h3",{id:"extends"},"extends"),(0,o.kt)("p",null,"Examples:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "extends": "./shared/api-extractor-base.json",\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "extends": "my-package/include/api-extractor-base.json",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'""')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," none"),(0,o.kt)("p",null,"Optionally specifies another JSON config file that this file extends from. This provides a way for\nstandard settings to be shared across multiple projects."),(0,o.kt)("p",null,"If the path starts with ",(0,o.kt)("inlineCode",{parentName:"p"},"./")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"../"),", the path is resolved relative to the folder of the file that contains the\n",(0,o.kt)("inlineCode",{parentName:"p"},"extends")," field. Otherwise, the first path segment is interpreted as an NPM package name, and will be resolved using\nNodeJS ",(0,o.kt)("inlineCode",{parentName:"p"},"require()"),"."),(0,o.kt)("h3",{id:"projectfolder"},"projectFolder"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "projectFolder": "..",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<lookup>"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<lookup>")),(0,o.kt)("p",null,"Determines the ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>")," token that can be used with other config file settings. The project folder typically\ncontains the ",(0,o.kt)("strong",{parentName:"p"},"tsconfig.json")," and ",(0,o.kt)("strong",{parentName:"p"},"package.json")," config files, but the path is user-defined."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting."),(0,o.kt)("p",null,"The default value for ",(0,o.kt)("inlineCode",{parentName:"p"},"projectFolder")," is the token ",(0,o.kt)("inlineCode",{parentName:"p"},"<lookup>"),", which means the folder is determined by traversing\nparent folders, starting from the folder containing api-extractor.json, and stopping at the first folder that contains\na ",(0,o.kt)("strong",{parentName:"p"},"tsconfig.json")," file. If a ",(0,o.kt)("strong",{parentName:"p"},"tsconfig.json")," file cannot be found in this way, then an error will be reported."),(0,o.kt)("h3",{id:"mainentrypointfilepath"},"mainEntryPointFilePath"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(REQUIRED)")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "mainEntryPointFilePath": "<projectFolder>/lib/index.d.ts",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Specifies the .d.ts file to be used as the starting point for analysis. API Extractor analyzes the symbols exported\nby this module."),(0,o.kt)("p",null,'The file extension must be ".d.ts" and not ".ts".'),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"bundledpackages"},"bundledPackages"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "bundledPackages": [ "library2" ],\n')),(0,o.kt)("p",null,"A list of NPM package names whose exports should be treated as part of this package."),(0,o.kt)("p",null,"For example, suppose that API extractor is run on the project ",(0,o.kt)("inlineCode",{parentName:"p"},"library1"),", and Webpack is used to generate a distributed\nbundle ",(0,o.kt)("inlineCode",{parentName:"p"},"library1.js")," that embeds another NPM package ",(0,o.kt)("inlineCode",{parentName:"p"},"library2"),". Some types from ",(0,o.kt)("inlineCode",{parentName:"p"},"library2")," may become part\nof the exported API for ",(0,o.kt)("inlineCode",{parentName:"p"},"library1"),", but by default API Extractor would generate a .d.ts rollup that explicitly\nimports ",(0,o.kt)("inlineCode",{parentName:"p"},"library2"),". To avoid this, we can specify ",(0,o.kt)("inlineCode",{parentName:"p"},'"bundledPackages": [ "library2" ]')," as shown above.\nThis would direct API Extractor to embed those types directly in the .d.ts rollup ",(0,o.kt)("inlineCode",{parentName:"p"},"library1.d.ts"),", as if they had\nbeen local files for ",(0,o.kt)("inlineCode",{parentName:"p"},"library1"),"."),(0,o.kt)("h3",{id:"newlinekind"},"newlineKind"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "newlineKind": "lf",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"crlf"')),(0,o.kt)("p",null,"Specifies what type of newlines API Extractor should use when writing output files. By default, the output files\nwill be written with Windows-style newlines. To use POSIX-style newlines, specify ",(0,o.kt)("inlineCode",{parentName:"p"},'"lf"')," instead. To use the OS's default\nnewline kind, specify ",(0,o.kt)("inlineCode",{parentName:"p"},'"os"'),"."),(0,o.kt)("h3",{id:"testmode"},"testMode"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "testMode": true,\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,"Set to true when invoking API Extractor's test harness. When ",(0,o.kt)("inlineCode",{parentName:"p"},"testMode")," is true, the ",(0,o.kt)("inlineCode",{parentName:"p"},"toolVersion")," field in the\n.api.json file is assigned an empty string to prevent spurious diffs in output files tracked for tests."),(0,o.kt)("h3",{id:"enummemberorder"},"enumMemberOrder"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "enumMemberOrder": "preserve",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"by-name"')),(0,o.kt)("p",null,"Specifies how API Extractor sorts members of an enum when generating api.json. By default, the output files\nwill be sorted alphabetically, which is ",(0,o.kt)("inlineCode",{parentName:"p"},'"by-name"'),". To keep the ordering in the source code, specify ",(0,o.kt)("inlineCode",{parentName:"p"},'"preserve"'),"."),(0,o.kt)("h2",{id:"compiler-section"},"Compiler Section"),(0,o.kt)("p",null,"Determines how the TypeScript compiler engine will be invoked by API Extractor."),(0,o.kt)("h3",{id:"compilertsconfigfilepath"},"compiler.tsconfigFilePath"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "tsconfigFilePath": "<projectFolder>/tsconfig.json",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<projectFolder>/tsconfig.json"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Specifies the path to the tsconfig.json file to be used by API Extractor when analyzing the project."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this, prepend\na folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("p",null,"Note: This setting will be ignored if ",(0,o.kt)("inlineCode",{parentName:"p"},"overrideTsconfig")," is used."),(0,o.kt)("h3",{id:"compileroverridetsconfig"},"compiler.overrideTsconfig"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "compiler": {\n    . . .\n    "overrideTsconfig": {\n      "$schema": "http://json.schemastore.org/tsconfig",\n\n      "compilerOptions": {\n        "target": "es5",\n        "module": "commonjs",\n        "declaration": true,\n        "sourceMap": true,\n        "declarationMap": true,\n        "outDir": "lib"\n      },\n      "include": [\n        "src/**/*.ts"\n      ]\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("em",{parentName:"p"},"no overrideTsconfig section")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Provides a compiler configuration that will be used instead of reading the ",(0,o.kt)("strong",{parentName:"p"},"tsconfig.json")," file from disk. The object\nmust conform to the ",(0,o.kt)("a",{parentName:"p",href:"http://json.schemastore.org/tsconfig"},"TypeScript tsconfig schema"),"."),(0,o.kt)("p",null,"If omitted, then the ",(0,o.kt)("strong",{parentName:"p"},"tsconfig.json")," file will be read from the ",(0,o.kt)("inlineCode",{parentName:"p"},"projectFolder"),"."),(0,o.kt)("h3",{id:"compilerskiplibcheck"},"compiler.skipLibCheck"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "compiler": {\n    . . .\n    "skipLibCheck": true\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,"This option causes the compiler to be invoked with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--skipLibCheck")," option. This option is not recommended and\nmay cause API Extractor to produce incomplete or incorrect declarations, but it may be required when dependencies\ncontain declarations that are incompatible with the TypeScript engine that API Extractor uses for its analysis.\nWhere possible, the underlying issue should be fixed rather than relying on ",(0,o.kt)("inlineCode",{parentName:"p"},"skipLibCheck"),"."),(0,o.kt)("h2",{id:"api-report-section"},"API Report Section"),(0,o.kt)("p",null,"Configures how the API report file (","*",".api.md) will be generated."),(0,o.kt)("h3",{id:"apireportenabled"},"apiReport.enabled"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(REQUIRED)")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "apiReport": {\n    "enabled": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,"Whether to generate an API report."),(0,o.kt)("h3",{id:"apireportreportfilename"},"apiReport.reportFileName"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "apiReport": {\n    . . .\n    "reportFileName": "<unscopedPackageName>.api.md",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<unscopedPackageName>.api.md"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"The filename for the API report files. It will be combined with ",(0,o.kt)("inlineCode",{parentName:"p"},"reportFolder")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"reportTempFolder")," to produce\na full output filename."),(0,o.kt)("p",null,"The file extension should be ",(0,o.kt)("inlineCode",{parentName:"p"},".api.md"),", and the string should not contain a path separator such as ",(0,o.kt)("inlineCode",{parentName:"p"},"\\")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),"."),(0,o.kt)("h3",{id:"apireportreportfolder"},"apiReport.reportFolder"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "apiReport": {\n    . . .\n    "reportFolder": "<projectFolder>/etc/",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<projectFolder>/etc/"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Specifies the folder where the API report file is written. The file name portion is determined by\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"reportFileName")," setting."),(0,o.kt)("p",null,"The API report file is normally tracked by Git. Changes to it can be used to trigger a branch policy, e.g. for\nan API review."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"apireportreporttempfolder"},"apiReport.reportTempFolder"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "apiReport": {\n    . . .\n    "reportTempFolder": "<projectFolder>/temp/",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<projectFolder>/temp/"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Specifies the folder where the temporary report file is written. The file name portion is determined by\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"reportFileName")," setting."),(0,o.kt)("p",null,"After the temporary file is written to disk, it is compared with the file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"reportFolder"),".\nIf they are different, a production build will fail."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"apireportincludeforgottenexports"},"apiReport.includeForgottenExports"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "apiReport": {\n    . . .\n    "includeForgottenExports": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,'Whether "forgotten exports" should be included in the API report file. Forgotten exports are declarations\nflagged with ',(0,o.kt)("a",{parentName:"p",href:"/pages/messages/ae-forgotten-export"},"ae-forgotten-export")," warnings."),(0,o.kt)("h2",{id:"doc-model-section"},"Doc Model Section"),(0,o.kt)("p",null,"Configures how the doc model file (","*",".api.json) will be generated."),(0,o.kt)("h3",{id:"docmodelenabled"},"docModel.enabled"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(REQUIRED)")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "docModel": {\n    "enabled": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,"Whether to generate a doc model file."),(0,o.kt)("h3",{id:"docmodelapijsonfilepath"},"docModel.apiJsonFilePath"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "docModel": {\n    . . .\n    "apiJsonFilePath": "<projectFolder>/temp/<unscopedPackageName>.api.json",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<projectFolder>/temp/<unscopedPackageName>.api.json"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"The output path for the doc model file. The file extension should be ",(0,o.kt)("inlineCode",{parentName:"p"},".api.json"),"."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"docmodelincludeforgottenexports"},"docModel.includeForgottenExports"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "docModel": {\n    . . .\n    "includeForgottenExports": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,'Whether "forgotten exports" should be included in the doc model file. Forgotten exports are declarations\nflagged with ',(0,o.kt)("a",{parentName:"p",href:"/pages/messages/ae-forgotten-export"},"ae-forgotten-export")," warnings."),(0,o.kt)("h2",{id:"dts-rollup-section"},".d.ts Rollup Section"),(0,o.kt)("p",null,"Configures how the .d.ts rollup file will be generated."),(0,o.kt)("h3",{id:"dtsrollupenabled"},"dtsRollup.enabled"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"(REQUIRED)")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "dtsRollup": {\n    "enabled": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,"Whether to generate the .d.ts rollup file."),(0,o.kt)("h3",{id:"dtsrollupuntrimmedfilepath"},"dtsRollup.untrimmedFilePath"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "dtsRollup": {\n    . . .\n    "untrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>.d.ts",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<projectFolder>/dist/<unscopedPackageName>.d.ts"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Specifies the output path for a .d.ts rollup file to be generated without any trimming.\nThis file will include all declarations that are exported by the main entry point."),(0,o.kt)("p",null,"If the path is an empty string, then this file will not be written."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"dtsrollupbetatrimmedfilepath"},"dtsRollup.betaTrimmedFilePath"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "dtsRollup": {\n    . . .\n    "betaTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-beta.d.ts",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'""')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,'Specifies the output path for a .d.ts rollup file to be generated with trimming for a "beta" release.\nThis file will include only declarations that are marked as ',(0,o.kt)("inlineCode",{parentName:"p"},"@public")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@beta"),"."),(0,o.kt)("p",null,"If the path is an empty string, then this file will not be written."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"dtsrolluppublictrimmedfilepath"},"dtsRollup.publicTrimmedFilePath"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "dtsRollup": {\n    . . .\n    "publicTrimmedFilePath": "<projectFolder>/dist/<unscopedPackageName>-public.d.ts",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'""')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,'Specifies the output path for a .d.ts rollup file to be generated with trimming for a "public" release.\nThis file will include only declarations that are marked as ',(0,o.kt)("inlineCode",{parentName:"p"},"@public"),"."),(0,o.kt)("p",null,"If the path is an empty string, then this file will not be written."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("h3",{id:"dtsrollupomittrimmingcomments"},"dtsRollup.omitTrimmingComments"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "dtsRollup": {\n    . . .\n    "omitTrimmingComments": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,"When a declaration is trimmed, by default it will be replaced by a code comment such as\n",(0,o.kt)("inlineCode",{parentName:"p"},"Excluded from this release type: exampleMember"),". Set ",(0,o.kt)("inlineCode",{parentName:"p"},"omitTrimmingComments")," to true to remove the\ndeclaration completely."),(0,o.kt)("h2",{id:"tsdoc-metadata-section"},"TSDoc Metadata Section"),(0,o.kt)("p",null,"Configures how the ",(0,o.kt)("strong",{parentName:"p"},"tsdoc-metadata.json")," file will be generated."),(0,o.kt)("h3",{id:"tsdocmetadataenabled"},"tsdocMetadata.enabled"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "tsdocMetadata": {\n    "enabled": true,\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"true")),(0,o.kt)("p",null,"Whether to generate the ",(0,o.kt)("strong",{parentName:"p"},"tsdoc-metadata.json")," file."),(0,o.kt)("h3",{id:"tsdocmetadatatsdocmetadatafilepath"},"tsdocMetadata.tsdocMetadataFilePath"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "tsdocMetadata": {\n    . . .\n    "tsdocMetadataFilePath": "<projectFolder>/dist/tsdoc-metadata.json",\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"<lookup>"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Supported tokens:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageName>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"<unscopedPackageName>")),(0,o.kt)("p",null,"Specifies where the TSDoc metadata file should be written."),(0,o.kt)("p",null,"The path is resolved relative to the folder of the config file that contains the setting; to change this,\nprepend a folder token such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<projectFolder>"),"."),(0,o.kt)("p",null,"The default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"<lookup>"),", which causes the path to be automatically inferred from the ",(0,o.kt)("inlineCode",{parentName:"p"},"tsdocMetadata"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"typings")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," fields of the project's package.json. If none of these fields are set, the lookup\nfalls back to ",(0,o.kt)("inlineCode",{parentName:"p"},"tsdoc-metadata.json")," in the package folder."),(0,o.kt)("h2",{id:"message-reporting-section"},"Message Reporting Section"),(0,o.kt)("p",null,"Configures how API Extractor reports error and warning messages produced during analysis."),(0,o.kt)("p",null,"There are three sources of messages: compiler messages, API Extractor messages, and TSDoc messages."),(0,o.kt)("h3",{id:"messagessectionruleloglevel"},"messages.","<","section",">",".","<","rule",">",".logLevel"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    "compilerMessageReporting": {\n      "default": {\n        // Treat compiler messages as errors instead of warnings\n        "logLevel": "error"\n      }\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"warning"')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible values:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'"error"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"warning"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},'"none"')),(0,o.kt)("p",null,"Specifies whether the message should be written to the the tool's output log. Note that\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"addToApiReportFile")," property may supersede this option."),(0,o.kt)("p",null,"Errors cause the build to fail and return a nonzero exit code. Warnings cause a production build fail\nand return a nonzero exit code. For a non-production build (e.g. when ",(0,o.kt)("inlineCode",{parentName:"p"},"api-extractor run")," includes\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"--local")," option), the warning is displayed but the build will not fail."),(0,o.kt)("h3",{id:"messagessectionruleaddtoapireportfile"},"messages.","<","section",">",".","<","rule",">",".addToApiReportFile"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    "compilerMessageReporting": {\n      "default": {\n        "logLevel": "warning",\n\n         // Don\'t break the build over compiler issues; instead write them to the API report\n        "addToApiReportFile": true\n      }\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"addToApiReportFile")," is true: If API Extractor is configured to write an API report file (.api.md),\nthen the message will be written inside that file; otherwise, the message is instead logged according to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"logLevel")," option."),(0,o.kt)("h3",{id:"messagescompilermessagereporting"},"messages.compilerMessageReporting"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    "compilerMessageReporting": {\n      "TS2551": {\n        // Ignore TypeScript error TS2551 ("Property ___ does not exist on type ___")\n        "logLevel": "none"\n      }\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    "compilerMessageReporting": {\n      "default": {\n        "logLevel": "warning"\n      }\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,"Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing\nthe input .d.ts files."),(0,o.kt)("p",null,"TypeScript message identifiers start with ",(0,o.kt)("inlineCode",{parentName:"p"},"TS")," followed by an integer. For example: ",(0,o.kt)("inlineCode",{parentName:"p"},"TS2551")),(0,o.kt)("h3",{id:"messagesextractormessagereporting"},"messages.extractorMessageReporting"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    . . .\n    "extractorMessageReporting": {\n      "ae-extra-release-tag": {\n        // Completely disable the "ae-extra-release-tag" validation\n        "logLevel": "none"\n      },\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(See ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/microsoft/rushstack/blob/main/apps/api-extractor/src/schemas/api-extractor-defaults.json"},"api-extractor-defaults.json"),"\nfor the complete up-to-date table.)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    . . .\n    "extractorMessageReporting": {\n      "default": {\n        "logLevel": "warning"\n      },\n      "ae-forgotten-export": {\n        "logLevel": "warning",\n        "addToApiReportFile": true\n      },\n      "ae-incompatible-release-tags": {\n        "logLevel": "warning",\n        "addToApiReportFile": true\n      },\n      "ae-internal-missing-underscore": {\n        "logLevel": "warning",\n        "addToApiReportFile": true\n      },\n      "ae-unresolved-inheritdoc-reference": {\n        "logLevel": "warning",\n        "addToApiReportFile": true\n      },\n      "ae-unresolved-inheritdoc-base": {\n        "logLevel": "warning",\n        "addToApiReportFile": true\n      }\n    },\n    . . .\n  }\n')),(0,o.kt)("p",null,"Configures handling of messages reported by API Extractor during its analysis."),(0,o.kt)("p",null,"API Extractor message identifiers start with ",(0,o.kt)("inlineCode",{parentName:"p"},"ae-"),". For example: ",(0,o.kt)("inlineCode",{parentName:"p"},"ae-extra-release-tag")),(0,o.kt)("h3",{id:"messagestsdocmessagereporting"},"messages.tsdocMessageReporting"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    . . .\n    "tsdocMessageReporting": {\n      "tsdoc-link-tag-unescaped-text": {\n        // Completely disable the "tsdoc-link-tag-unescaped-text" validation\n        "logLevel": "none"\n      },\n    }\n  }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default value:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  "messages": {\n    . . .\n    "tsdocMessageReporting": {\n      "default": {\n        "logLevel": "warning"\n      }\n    }\n  }\n')),(0,o.kt)("p",null,"Configures handling of messages reported by the TSDoc parser when analyzing code comments."),(0,o.kt)("p",null,"TSDoc message identifiers start with ",(0,o.kt)("inlineCode",{parentName:"p"},"tsdoc-"),". For example: ",(0,o.kt)("inlineCode",{parentName:"p"},"tsdoc-link-tag-unescaped-text")))}k.isMDXComponent=!0}}]);