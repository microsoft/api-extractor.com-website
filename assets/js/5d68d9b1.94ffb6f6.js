"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[6555],{158:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>g});var r=a(6393);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=n,g=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return a?r.createElement(g,p(p({ref:t},l),{},{components:a})):r.createElement(g,p({ref:t},l))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,p=new Array(o);p[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:n,p[1]=s;for(var c=2;c<o;c++)p[c]=a[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5034:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var r=a(9122),n=a(2501),o=(a(6393),a(158)),p=["components"],s={title:"@param"},i=void 0,c={unversionedId:"pages/tsdoc/tag_param",id:"pages/tsdoc/tag_param",title:"@param",description:"Tag type: block tag",source:"@site/docs/pages/tsdoc/tag_param.md",sourceDirName:"pages/tsdoc",slug:"/pages/tsdoc/tag_param",permalink:"/pages/tsdoc/tag_param",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/tsdoc/tag_param.md",tags:[],version:"current",frontMatter:{title:"@param"},sidebar:"docsSidebar",previous:{title:"@packageDocumentation",permalink:"/pages/tsdoc/tag_packagedocumentation"},next:{title:"@preapproved",permalink:"/pages/tsdoc/tag_preapproved"}},l={},m=[{value:"See also",id:"see-also",level:2}],u={toc:m},d="wrapper";function g(e){var t=e.components,a=(0,n.Z)(e,p);return(0,o.kt)(d,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Tag type:")," block tag"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TSDoc standardization:")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/blob/master/tsdoc/src/details/Standardization.ts"},"core")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Syntax:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"@param NAME - DESCRIPTION"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@param")," tag is used to document a function or method parameter. The ",(0,o.kt)("inlineCode",{parentName:"p"},"@param")," tag is followed by the\nparameter name, followed by a hyphen, followed by a description. Being a block tag, ",(0,o.kt)("inlineCode",{parentName:"p"},"@param")," introduces\na TSDoc section that contains all comment text up until the next block tag."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: ",(0,o.kt)("a",{parentName:"p",href:"http://usejsdoc.org/tags-param.html"},"JSDoc's version")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@param")," tag optionally allows type\ninformation to be specified in curly braces. For example:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// NOT SUPPORTED BY API EXTRACTOR\n\n/**\n * @param {string} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n  alert('Hello ' + somebody);\n}\n")),(0,o.kt)("p",{parentName:"blockquote"},"API Extractor does not support this ",(0,o.kt)("inlineCode",{parentName:"p"},"{string}")," notation, since its grammar is complex, and\nthe type system it implements is fairly rudimentary compared to TypeScript's. For TypeScript source code,\nthe parameter type information is already fully expressed in the code, and thus it would be redundant\nto try to express it in a doc comment.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/** @public */\nexport class Statistics {\n  /**\n   * Returns the average of two numbers.\n   *\n   * @remarks\n   * This method is part of the {@link core-library#Statistics | Statistics subsystem}.\n   *\n   * @param x - The first input number\n   * @param y - The second input number\n   * @returns The arithmetic mean of `x` and `y`\n   */\n  public static getAverage(x: number, y: number): number {\n    return (x + y) / 2.0;\n  }\n}\n")),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/tsdoc/tag_typeparam"},"@typeParam tag")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/tsdoc/tag_returns"},"@returns tag"))))}g.isMDXComponent=!0}}]);