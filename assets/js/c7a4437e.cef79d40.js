"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[8981],{158:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(6393);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(9122),a=n(2501),i=(n(6393),n(158)),s=["components"],o={title:"ae-internal-missing-underscore"},l=void 0,c={unversionedId:"pages/messages/ae-internal-missing-underscore",id:"pages/messages/ae-internal-missing-underscore",title:"ae-internal-missing-underscore",description:'"The name \\\\\\ should be prefixed with an underscore because the declaration is marked as @internal."_',source:"@site/docs/pages/messages/ae-internal-missing-underscore.md",sourceDirName:"pages/messages",slug:"/pages/messages/ae-internal-missing-underscore",permalink:"/pages/messages/ae-internal-missing-underscore",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/messages/ae-internal-missing-underscore.md",tags:[],version:"current",frontMatter:{title:"ae-internal-missing-underscore"},sidebar:"docsSidebar",previous:{title:"ae-incompatible-release-tags",permalink:"/pages/messages/ae-incompatible-release-tags"},next:{title:"ae-internal-mixed-release-tag",permalink:"/pages/messages/ae-internal-mixed-release-tag"}},p={},d=[{value:"Remarks",id:"remarks",level:2},{value:"How to fix",id:"how-to-fix",level:2}],u={toc:d},m="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},'"The name ',"_","_","_",' should be prefixed with an underscore because the declaration is marked as @internal."')),(0,i.kt)("h2",{id:"remarks"},"Remarks"),(0,i.kt)("p",null,"When a declaration is marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"@internal"),", it's a good practice to prefix its name with an underscore character\n(\"","_",'").'),(0,i.kt)("p",null,"Suppose that there is a library called ",(0,i.kt)("strong",{parentName:"p"},"widget-lib")," which exports a declaration like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * @internal\n */\nexport class Widget {\n  public render(): void {}\n}\n\n/**\n * @public\n */\nexport class WidgetManager {\n  /**\n   * @internal\n   */\n  public initialize(): void {}\n}\n\n// Warning: The name "Widget" should be prefixed with an underscore because\n// the declaration is marked as @internal.\n// Warning: The name "initialize" should be prefixed with an underscore because\n// the declaration is marked as @internal.\n')),(0,i.kt)("p",null,"When a caller goes to use this API, they might accidentally try to use ",(0,i.kt)("inlineCode",{parentName:"p"},"Widget")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize"),", not realizing\nthat they are internal. API Extractor's .d.ts trimming feature can help by removing these declarations from the\nTypeScript IntelliSense, but what if you are not using that feature? Or what if your library is consumed by\nJavaScript code that does not perform type checking?"),(0,i.kt)("p",null,"Adding an underscore to these declarations makes it immediately obvious that something is special about these APIs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * @internal\n */\nexport class _Widget {\n  // This method is @internal, but we don't add an underscore because\n  // the container already has an underscore:\n  public render(): void {}\n}\n\n/**\n * @public\n */\nexport class WidgetManager {\n  /**\n   * @internal\n   */\n  public _initialize(): void {}\n}\n")),(0,i.kt)("p",null,"The consumer's code might look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { _Widget, WidgetManager } from 'widget-lib';\n\nlet widget = new _Widget(); // <-- bad\n\nlet widgetManager = new WidgetManager();\nwidgetManager._initialize(); // <-- bad\n")),(0,i.kt)("p",null,"The underscore makes this mistake much easier to spot."),(0,i.kt)("p",null,"Note that we don't need to add an underscore to every member of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Widget")," class. That would be redundant,\nsince in TypeScript you can't access to those items without referring to their container. Thus, API Extractor\nonly checks ",(0,i.kt)("inlineCode",{parentName:"p"},"ae-internal-missing-underscore")," for the outermost ",(0,i.kt)("inlineCode",{parentName:"p"},"@internal")," container."),(0,i.kt)("h2",{id:"how-to-fix"},"How to fix"),(0,i.kt)("p",null,"Rename the internal declaration so that its name starts with an underscore."),(0,i.kt)("p",null,"Alternatively, if changing your API signature would be too disruptive, you can simply choose to ignore this message.\nBy default it uses ",(0,i.kt)("inlineCode",{parentName:"p"},"addToApiReportFile")," reporting, which means that it will be written into your API report\nfor tracking purposes. It will not produce a console warning and thus will NOT break your build\n(assuming that you have ",(0,i.kt)("inlineCode",{parentName:"p"},"apiReport.enabled")," set to true)."))}g.isMDXComponent=!0}}]);