"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[4690],{158:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(6393);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=p(r),d=a,f=l["".concat(c,".").concat(d)]||l[d]||m[d]||o;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},636:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=r(9122),a=r(2501),o=(r(6393),r(158)),s=["components"],i={title:"@returns"},c=void 0,p={unversionedId:"pages/tsdoc/tag_returns",id:"pages/tsdoc/tag_returns",title:"@returns",description:"Tag type: block tag",source:"@site/docs/pages/tsdoc/tag_returns.md",sourceDirName:"pages/tsdoc",slug:"/pages/tsdoc/tag_returns",permalink:"/pages/tsdoc/tag_returns",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/tsdoc/tag_returns.md",tags:[],version:"current",frontMatter:{title:"@returns"},sidebar:"docsSidebar",previous:{title:"@remarks",permalink:"/pages/tsdoc/tag_remarks"},next:{title:"@sealed",permalink:"/pages/tsdoc/tag_sealed"}},u={},l=[{value:"See also",id:"see-also",level:2}],m={toc:l},d="wrapper";function f(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Tag type:")," block tag"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TSDoc standardization:")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/blob/master/tsdoc/src/details/Standardization.ts"},"core")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@returns")," tag is used to document the return value of a function or method parameter. Being a block tag,\n",(0,o.kt)("inlineCode",{parentName:"p"},"@returns")," introduces a TSDoc section that contains all comment text up until the next block tag."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTE: ",(0,o.kt)("a",{parentName:"p",href:"http://usejsdoc.org/tags-returns.html"},"JSDoc's version")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@returns")," tag optionally allows type\ninformation to be specified in curly braces. For example:"),(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// NOT SUPPORTED BY API EXTRACTOR\n\n/**\n * Returns the sum of a and b\n * @param {number} a\n * @param {number} b\n * @param {boolean} retArr If set to true, the function will return an array\n * @returns {(number|Array)} Sum of a and b or an array\n */\nfunction sum(a, b, retArr) {\n  if (retArr) {\n    return [a, b, a + b];\n  }\n  return a + b;\n}\n")),(0,o.kt)("p",{parentName:"blockquote"},"API Extractor does not support this ",(0,o.kt)("inlineCode",{parentName:"p"},"{(number|Array)}")," notation, since its grammar is complex, and\nthe type system it implements is fairly rudimentary compared to TypeScript's. For TypeScript source code,\nthe return type information is already fully expressed in the code, and thus it would be redundant\nto try to express it in a doc comment.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/** @public */\nexport class Statistics {\n  /**\n   * Returns the average of two numbers.\n   *\n   * @remarks\n   * This method is part of the {@link core-library#Statistics | Statistics subsystem}.\n   *\n   * @param x - The first input number\n   * @param y - The second input number\n   * @returns The arithmetic mean of `x` and `y`\n   */\n  public static getAverage(x: number, y: number): number {\n    return (x + y) / 2.0;\n  }\n}\n")),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/pages/tsdoc/tag_param"},"@param tag"))))}f.isMDXComponent=!0}}]);