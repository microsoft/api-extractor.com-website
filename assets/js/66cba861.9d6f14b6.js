"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[603],{158:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>f});var n=o(6393);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(o),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return o?n.createElement(f,s(s({ref:t},l),{},{components:o})):n.createElement(f,s({ref:t},l))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=o[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},4293:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=o(9122),r=o(2501),a=(o(6393),o(158)),s=["components"],i={title:"tsdoc.json"},c=void 0,p={unversionedId:"pages/configs/tsdoc_json",id:"pages/configs/tsdoc_json",title:"tsdoc.json",description:"TSDoc is a standard syntax for TypeScript doc comments. It can be extended with custom",source:"@site/docs/pages/configs/tsdoc_json.md",sourceDirName:"pages/configs",slug:"/pages/configs/tsdoc_json",permalink:"/pages/configs/tsdoc_json",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/configs/tsdoc_json.md",tags:[],version:"current",frontMatter:{title:"tsdoc.json"},sidebar:"docsSidebar",previous:{title:"api-extractor.json",permalink:"/pages/configs/api-extractor_json"},next:{title:"API packages",permalink:"/pages/developer/api"}},l={},d=[{value:"Defining your own TSDoc tags",id:"defining-your-own-tsdoc-tags",level:2}],u={toc:d},m="wrapper";function f(e){var t=e.components,o=(0,r.Z)(e,s);return(0,a.kt)(m,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://tsdoc.org/"},"TSDoc"),' is a standard syntax for TypeScript doc comments. It can be extended with custom\ntag definitions. API Extractor\'s custom tags are referred to as "AEDoc" tags. They are defined in the file\n',(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rushstack/blob/main/apps/api-extractor/extends/tsdoc-base.json"},"extends/tsdoc-base.json"),"."),(0,a.kt)("p",null,"If your code comments are processed by other TSDoc-compatible tools, you can add a ",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," config file\nto your project. This enables different tools to agree about how comments should be parsed. If you are using\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-tsdoc"},"eslint-plugin-tsdoc")," plugin, it also enables ESLint\nto report warnings for tags that are ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"not defined"))," (for example misspelled) or ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"not supported")),"\n(for example a standardized tag that is not implemented by your tooling)."),(0,a.kt)("p",null,"Add a file like this to your project:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"<","your-project-folder",">","/tsdoc.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",\n\n  // Inherit the TSDoc configuration for API Extractor\n  "extends": [ "@microsoft/api-extractor/extends/tsdoc-base.json" ]\n}\n')),(0,a.kt)("h2",{id:"defining-your-own-tsdoc-tags"},"Defining your own TSDoc tags"),(0,a.kt)("p",null,"You can also define your own tags in ",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json"),", and the ESLint plugin will validate them.\nAPI Extractor serializes these definitions into the .api.json output files (in the ",(0,a.kt)("inlineCode",{parentName:"p"},'"tsdocConfig"')," field)\nso that they are accessible to tools that use the\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@microsoft/api-extractor-model"},"@microsoft/api-extractor-model")," library\n(via the ",(0,a.kt)("a",{parentName:"p",href:"https://api.rushstack.io/pages/api-extractor-model.apidocumenteditem/"},"ApiDocumentedItem.tsdocComment")," API)."),(0,a.kt)("p",null,"A custom tag definition might look like this:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"<","your-project-folder",">","/tsdoc.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",\n\n  // Include the definitions that are required for API Extractor\n  "extends": ["@microsoft/api-extractor/extends/tsdoc-base.json"],\n\n  // noStandardTags: false,\n\n  "tagDefinitions": [\n    // Define a custom tag and specify how it should be parsed\n    {\n      "tagName": "@myCustomTag",\n      "syntaxKind": "block",\n      "allowMultiple": true,\n    }\n  ],\n\n  "supportForTags": {\n    // Indicate that the custom tag is supported by your tooling.  (Without this, warnings may\n    // be reported saying that the tag is unsupported.)\n    "@myCustomTag": true\n  }\n}\n')),(0,a.kt)("p",null,"The resulting TSDoc configuration will include the AEDoc definitions that were merged via ",(0,a.kt)("inlineCode",{parentName:"p"},'"extends"'),",\nplus the standard tags that are predefined by the TSDoc parser. To see your project's final TSDoc configuration,\ninvoke API Extractor with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--diagnostics")," command-line option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ cd your-project-folder\n\n# Look for the "DIAGNOSTIC: TSDoc configuration" in the console output\n$ api-extractor run --local --diagnostics\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more details about the ",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," file, refer to the\n",(0,a.kt)("a",{parentName:"p",href:"https://tsdoc.org/pages/packages/tsdoc-config/"},"@microsoft/tsdoc-config")," documentation.")))}f.isMDXComponent=!0}}]);