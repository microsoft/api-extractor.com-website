"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[6249],{158:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(6393);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7318:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var n=r(9122),o=r(2501),a=(r(6393),r(158)),i=["components"],l={title:"@override"},s=void 0,c={unversionedId:"pages/tsdoc/tag_override",id:"pages/tsdoc/tag_override",title:"@override",description:"Tag type: modifier",source:"@site/docs/pages/tsdoc/tag_override.md",sourceDirName:"pages/tsdoc",slug:"/pages/tsdoc/tag_override",permalink:"/pages/tsdoc/tag_override",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/tsdoc/tag_override.md",tags:[],version:"current",frontMatter:{title:"@override"},sidebar:"docsSidebar",previous:{title:"{@link}",permalink:"/pages/tsdoc/tag_link"},next:{title:"@packageDocumentation",permalink:"/pages/tsdoc/tag_packagedocumentation"}},p={},d=[{value:"See also",id:"see-also",level:2}],u={toc:d},m="wrapper";function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tag type:")," modifier"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"TSDoc standardization:")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/blob/master/tsdoc/src/details/Standardization.ts"},"extended")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@override")," modifier has similar semantics to the ",(0,a.kt)("inlineCode",{parentName:"p"},"override")," keyword in C#. It should only be applied\nto a member of a class. The ",(0,a.kt)("inlineCode",{parentName:"p"},"@override")," modifier indicates that the member is overriding (i.e. redefining)\nthe corresponding member from a base class. The base class member should be marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"@virtual")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"@override"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@override")," modifier will be displayed in the generated documentation."),(0,a.kt)("p",null,"API Extractor does not currently validate whether the ",(0,a.kt)("inlineCode",{parentName:"p"},"@override")," modifier is used correctly.\n(This may be implemented in the future.)"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: Unlike many other programming languages, TypeScript supports inheritance for static members of a class.\nThus, it is valid to use ",(0,a.kt)("inlineCode",{parentName:"p"},"@virtual"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@override"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"@sealed")," for static members as well as instance members.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Usage example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/** @public */\nexport class Control {\n  /**\n   * The title of the control\n   * @virtual\n   */\n  public get title(): string {\n    return 'Control';\n  }\n\n  /**\n   * Draws the control on the screen\n   * @virtual\n   */\n  public render(): void {\n    . . .\n  }\n}\n\n/** @public */\nexport class Button extends Control {\n  /**\n   * {@inheritDoc Control.title}\n   * @override\n   */\n  public get title(): string {\n    return 'Button';\n  }\n\n  /**\n   * {@inheritDoc Control.render}\n   * @override\n   */\n  public render(): void {\n    . . .\n  }\n}\n\n/** @public */\nexport class FancyButton extends Button {\n  /**\n   * {@inheritDoc Button.title}\n   * @override\n   */\n  public get title(): string {\n    return 'Fancy Button';\n  }\n\n  /**\n   * {@inheritDoc Button.render}\n   * @override\n   */\n  public render(): void {\n    . . .\n  }\n}\n")),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/tsdoc/tag_virtual"},"@virtual modifier")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/pages/tsdoc/tag_sealed"},"@sealed modifier")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/override"},'C# "override" keyword'))))}f.isMDXComponent=!0}}]);