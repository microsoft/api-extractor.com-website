"use strict";(self.webpackChunkapi_extractor_com=self.webpackChunkapi_extractor_com||[]).push([[3042],{158:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(6393);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6993:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=n(9122),a=n(2501),o=(n(6393),n(158)),i=["components"],l={title:"Declaration references"},s=void 0,c={unversionedId:"pages/tsdoc/declaration_references",id:"pages/tsdoc/declaration_references",title:"Declaration references",description:"Certain tags such as {@inheritdoc} and {@link} can refer to other API items such as classes, member functions,",source:"@site/docs/pages/tsdoc/declaration_references.md",sourceDirName:"pages/tsdoc",slug:"/pages/tsdoc/declaration_references",permalink:"/pages/tsdoc/declaration_references",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/api-extractor.com/docs/pages/tsdoc/declaration_references.md",tags:[],version:"current",frontMatter:{title:"Declaration references"},sidebar:"docsSidebar",previous:{title:"Doc comment syntax",permalink:"/pages/tsdoc/doc_comment_syntax"},next:{title:"@alpha",permalink:"/pages/tsdoc/tag_alpha"}},p={},d=[{value:"Syntax Examples",id:"syntax-examples",level:2},{value:"A simple local declaration",id:"a-simple-local-declaration",level:3},{value:"An imported declaration",id:"an-imported-declaration",level:3},{value:"An entire package",id:"an-entire-package",level:3},{value:"A merged declaration",id:"a-merged-declaration",level:3},{value:"Unsupported Features",id:"unsupported-features",level:2}],m={toc:d},u="wrapper";function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Certain tags such as ",(0,o.kt)("inlineCode",{parentName:"p"},"{@inheritdoc}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"{@link}")," can refer to other API items such as classes, member functions,\nenum values, etc. The referenced item may be local, or it may be imported from an external NPM package.\nIt could be part of a merged declaration or an overloaded function."),(0,o.kt)("p",null,'The TSDoc syntax provides a special "',(0,o.kt)("strong",{parentName:"p"},"declaration reference"),'" notation for unambiguously identifying declarations\nin all these situations. (This aspect of TSDoc is still evolving; it is tracked by\n',(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/issues/9"},"RFC #9"),". The current spec is outlined in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/blob/master/spec/code-snippets/DeclarationReferences.ts"},"code-snippets/DeclarationReferences.ts"),".)"),(0,o.kt)("h2",{id:"syntax-examples"},"Syntax Examples"),(0,o.kt)("p",null,"Below are syntax examples that should help you get started writing declaration references."),(0,o.kt)("h3",{id:"a-simple-local-declaration"},"A simple local declaration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/** @public */\nexport class Widget {\n  /**\n   * Call this before calling the {@link Widget.render | the render() method}.\n   */\n  public initialize(): void {}\n\n  public render(): void {}\n}\n")),(0,o.kt)("p",null,'To refer to a declaration in the same project, simply use its name, with a "." to scope any nested members.\nIn the above example, ',(0,o.kt)("inlineCode",{parentName:"p"},"Widget.render")," refers to the ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Widget")," class. As long as the match\nis unambiguous, it doesn't matter whether the member is ",(0,o.kt)("inlineCode",{parentName:"p"},"static")," or not."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"TSDoc declaration references are always resolved relative to a specific entry point (NOT relative to the current\nsource file or declaration scope). Thus, their syntax is independent of where the reference occurs within\na given package. Since ",(0,o.kt)("inlineCode",{parentName:"p"},"Widget.initialize")," appears inside ",(0,o.kt)("inlineCode",{parentName:"p"},"Widget"),", we may want to shorten the reference to\n",(0,o.kt)("inlineCode",{parentName:"p"},"{@link render | the render() method}"),", but TSDoc standard does not support this.")),(0,o.kt)("h3",{id:"an-imported-declaration"},"An imported declaration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Widget } from '@my-org/widget-lib';\n\n/**\n * Returns a new instance of the {@link @my-org/widget-lib#Widget} class.\n * @public\n */\nexport function createWidget(): Widget {\n  . . .\n}\n")),(0,o.kt)("p",null,"To refer to a declaration that is imported from an NPM package, specify the package name followed by a ",(0,o.kt)("inlineCode",{parentName:"p"},"#"),"\ncharacter (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"widget-lib#Widget"),"). If the package name has an NPM scope, it can be included\nas well (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"@my-org/widget-lib#Widget"),")."),(0,o.kt)("h3",{id:"an-entire-package"},"An entire package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Button } from 'controls';\n\n/**\n * Constructs a `Button` as defined by the {@link controls#} library.\n * @public\n */\nexport function createButton(): Button {\n  . . .\n}\n")),(0,o.kt)("p",null,"To refer to the entire package (rather than a particular export), simply omit the member name as shown above.\nYou must include the ",(0,o.kt)("inlineCode",{parentName:"p"},"#")," character, however, since otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"controls")," looks like a reference to a declaration\nwith that name."),(0,o.kt)("h3",{id:"a-merged-declaration"},"A merged declaration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/** @public */\nexport enum ShirtSize {\n  Small,\n  Medium,\n  Large\n}\n\n/** @public */\nexport namespace ShirtSize {\n  /**\n   * Parses a string and returns an instance of the\n   * {@link (ShirtSize:enum)} enum.\n   */\n  export function parseName(name: string): ShirtSize {\n    switch (name) {\n      case 'S':\n        return ShirtSize.Small;\n      case 'M':\n        return ShirtSize.Small;\n      case 'L':\n        return ShirtSize.Large;\n    }\n    throw new Error('Invalid size');\n  }\n}\n")),(0,o.kt)("p",null,"In the above example, the symbol ",(0,o.kt)("inlineCode",{parentName:"p"},"ShirtSize")," is both an enum and a namespace. If we simply wrote ",(0,o.kt)("inlineCode",{parentName:"p"},"{@link ShirtSize}"),"\nthen API Extractor would report a warning like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Warning: (ae-unresolved-link) The @link reference could not be resolved:\nThe reference is ambiguous because "ShirtSize" has more than one declaration;\nyou need to add a TSDoc member reference selector\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"(ShirtSize:enum)")," notation uses a TSDoc system selector to clarify that we're talking about the enum,\nnot the namespace."),(0,o.kt)("h2",{id:"unsupported-features"},"Unsupported Features"),(0,o.kt)("p",null,"API Extractor supports all the core features of TSDoc declaration references, but does not yet\nsupport some advanced features that are described in the spec:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Index selectors"),(0,o.kt)("li",{parentName:"ul"},"Label selectors"),(0,o.kt)("li",{parentName:"ul"},"References using ECMAScript symbols instead of identifiers"),(0,o.kt)("li",{parentName:"ul"},"Import paths")),(0,o.kt)("p",null,"These features may be implemented in the future. If you'd like to contribute, take a look at the code in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rushstack/blob/main/apps/api-extractor/src/analyzer/AstReferenceResolver.ts"},"AstReferenceResolver.ts"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/rushstack/blob/main/libraries/api-extractor-model/src/model/ModelReferenceResolver.ts"},"ModelReferenceResolver.ts"),"."))}h.isMDXComponent=!0}}]);